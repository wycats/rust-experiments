#![allow(unused)]

use spectrum_macros::frag;
use spectrum::{SimpleContext, Structure, StringArena, StyledFragment};

struct Stringy {
    value: String,
}
impl Stringy {
    fn value(&self) -> &str {
        &self.value
    }
}

fn main() {
    let mut arena = StringArena::default();

    let tuple = ("hello","world");

    let stringy = Stringy {
        value: "Niko".to_string(),
    };
    let value: StyledFragment<StringArena> = frag!({{{code}}});
}
---
[Red: "hello"]
---
"hello"
---
[Red: "hello"] [Green: "world"]
---
[Red: "hello"] tuple.0 [Green: "world"]
---
[Red: "hello"] stringy.value() [Green: "world"]
---
[Red: "hello"] arena.intern(1 + 1) [Green: "world"]
---
[Red: "hello"] ; [Green: "world"]
---
"hello" ; "world"
---
[Red: "hello"] [Green: "world"] ; [Red: "goodbye"] "world"
---
[Red: "hello"] tuple.0 [Green: "world"] ; [Red: "goodbye"] tuple.1 [Green: "world"]
---
[Red: "hello"] stringy.value() [Green: "world"] ; [Red: stringy.value()]